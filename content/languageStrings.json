{
    "en-US": {
        "translation": {
            "start.narration": "Welcome to the Skill Flow Builder. Let's get to know each other.\n       What is your name?",
            "utterance-my name is {playerName}": "my name is {playerName}",
            "utterance-{playerName}": "{playerName}",
            "utterance-call me {playerName}": "call me {playerName}",
            "learn scenes.narration": "Great! Welcome to the framework {playerName}! Let's get started.\n        Scenes are the basic building blocks of a story in the Skill Flow Builder.  \n        They can be connected linearly, branching, looping, or any other way you can think of. \n        First, you have to give each scene a name. For example, this scene is named 'learn scenes'. This name needs to be unique within your story. \n        Then, you can give your scene some content. For example, this scene has 'say' content, which you are hearing right now and some 'then' content which tells it where to go next.",
            "learn say and reprompt.narration": "Let's learn more about 'say' and 'reprompt' content within a scene.\n        What you are hearing right now is this scene's 'say' content.\n        To hear this scene's 'reprompt' try not saying anything...",
            "learn say and reprompt.reprompt": "'reprompt' content is what the player will hear if nothing is said or we didn't understand what the player said.\n        If you don't provide 'reprompt' content, it will just repeat the 'say' content. \n        Try saying 'continue' this time.",
            "utterance-continue": "continue",
            "utterance-move on": "move on",
            "utterance-ready": "ready",
            "utterance-go": "go",
            "learn choices.narration": "In the 'then' content, you can tell the scene to go somewhere if it hears something by using the keyword 'hear'. \n        We've been using this in the previous scenes to listen for the word 'continue' and then -> the next scene.\n        You can use 'hear' multiple times in order to give players choices.\n        For example, would you like to learn more about choices or move on to the next topic?",
            "utterance-learn more about choices": "learn more about choices",
            "utterance-move on to the next topic": "move on to the next topic",
            "more on choices.narration": "Players might respond with variations of the command you provide them. You can list multiple variations inline using a comma to separate them.\n        For example, say 'continue', 'move on', or 'get moving' to continue.",
            "utterance-get moving": "get moving",
            "learn variables.narration": "Great! Sometimes you might want to add or remove items or change some attributes to make your story more exciting.\n        You can accomplish this in the 'then' content. 'set', 'increase', or 'decrease' a variable. \n        For example, we set 'antidote' to 0.\n        Now, we can use this variable in our story. Say 'continue' to find out how.",
            "antidote zero.narration": "You are hearing this because we detected that you don't have any antidotes.\n        We used an 'if' statement in the 'then' content to accomplish this. Use a period to close your 'if' statement.\n        Add an antidote by saying 'add antidote'.",
            "antidote zero.reprompt": "Say 'add antidote.'",
            "utterance-add antidote": "add antidote",
            "utterance-antidote": "antidote",
            "utterance-more antidote": "more antidote",
            "antidote one.narration": "You are hearing this because we detected that you now have 1 antidote.\n        Add one more antidote by saying 'add antidote'.",
            "antidote one.reprompt": "Say 'add antidote.'",
            "antidotes.narration": "You have {antidote} antidotes. \n        You are hearing this because the first 2 'if' statements weren't triggered. \n        When an 'if' is triggered and it has a '->' in it, nothing afterwards is executed. \n        Try adding one more antidote or say continue to move to next scene.",
            "antidotes.recap": "You have {antidote} antidotes. \n        This is the same scene as the one you just heard but you are hearing the recap content instead of the say content.\n        The 'recap' is played if you have already heard this scene once and can be useful in trimming down long scenes that the user could encounter multiple times.\n        You can add even more antidotes by saying 'add antidote' or say 'continue' to move on.",
            "images.narration": "Skill Flow Builder allows you to show content on supported devices during a scene.\n        Ready to continue?",
            "utterance-yes": "yes",
            "background music.narration": "Skill Flow Builder allows you to mix sounds into the background of a scene and use SSML in the say section, like playing a trumpet sound. <audio src='https://s3.amazonaws.com/alexa-ml/testadventureskill/en-US/audio/trumpet_1.mp3' /> \n        Ready to continue?",
            "congrats.narration": "Congratulations! You have finished the basic tutorial.\n        There are more features that can be found in the documentation.",
            "resume.narration": "This is a resuming scene. This scene is played when the user re-launches your skill after exiting.\n        Do you want to continue your story from where you last left off?",
            "utterance-Yes": "Yes",
            "utterance-No": "No",
            "pause.narration": "Thanks for playing!",
            "utterance-restart": "restart",
            "utterance-start again": "start again",
            "utterance-repeat": "repeat",
            "utterance-say again": "say again",
            "utterance-repeat it": "repeat it",
            "utterance-what did you say": "what did you say",
            "utterance-I didn’t understand": "I didn’t understand",
            "utterance-help": "help",
            "utterance-I need help": "I need help",
            "utterance-please help me": "please help me",
            "utterance-back": "back",
            "utterance-previous": "previous",
            "utterance-rewind": "rewind",
            "help.narration": "This is a help message. In this story, this scene is set up to be reachable only through the global scene."
        }
    },
    "es-ES": {
        "translation": {
            "start.narration": "Welcome to the Skill Flow Builder. Let's get to know each other.\n       What is your name?",
            "utterance-my name is {playerName}": "my name is {playerName}",
            "utterance-{playerName}": "{playerName}",
            "utterance-call me {playerName}": "call me {playerName}",
            "learn scenes.narration": "Great! Welcome to the framework {playerName}! Let's get started.\n        Scenes are the basic building blocks of a story in the Skill Flow Builder.  \n        They can be connected linearly, branching, looping, or any other way you can think of. \n        First, you have to give each scene a name. For example, this scene is named 'learn scenes'. This name needs to be unique within your story. \n        Then, you can give your scene some content. For example, this scene has 'say' content, which you are hearing right now and some 'then' content which tells it where to go next.",
            "learn say and reprompt.narration": "Let's learn more about 'say' and 'reprompt' content within a scene.\n        What you are hearing right now is this scene's 'say' content.\n        To hear this scene's 'reprompt' try not saying anything...",
            "learn say and reprompt.reprompt": "'reprompt' content is what the player will hear if nothing is said or we didn't understand what the player said.\n        If you don't provide 'reprompt' content, it will just repeat the 'say' content. \n        Try saying 'continue' this time.",
            "utterance-continue": "continue",
            "utterance-move on": "move on",
            "utterance-ready": "ready",
            "utterance-go": "go",
            "learn choices.narration": "In the 'then' content, you can tell the scene to go somewhere if it hears something by using the keyword 'hear'. \n        We've been using this in the previous scenes to listen for the word 'continue' and then -> the next scene.\n        You can use 'hear' multiple times in order to give players choices.\n        For example, would you like to learn more about choices or move on to the next topic?",
            "utterance-learn more about choices": "learn more about choices",
            "utterance-move on to the next topic": "move on to the next topic",
            "more on choices.narration": "Players might respond with variations of the command you provide them. You can list multiple variations inline using a comma to separate them.\n        For example, say 'continue', 'move on', or 'get moving' to continue.",
            "utterance-get moving": "get moving",
            "learn variables.narration": "Great! Sometimes you might want to add or remove items or change some attributes to make your story more exciting.\n        You can accomplish this in the 'then' content. 'set', 'increase', or 'decrease' a variable. \n        For example, we set 'antidote' to 0.\n        Now, we can use this variable in our story. Say 'continue' to find out how.",
            "antidote zero.narration": "You are hearing this because we detected that you don't have any antidotes.\n        We used an 'if' statement in the 'then' content to accomplish this. Use a period to close your 'if' statement.\n        Add an antidote by saying 'add antidote'.",
            "antidote zero.reprompt": "Say 'add antidote.'",
            "utterance-add antidote": "add antidote",
            "utterance-antidote": "antidote",
            "utterance-more antidote": "more antidote",
            "antidote one.narration": "You are hearing this because we detected that you now have 1 antidote.\n        Add one more antidote by saying 'add antidote'.",
            "antidote one.reprompt": "Say 'add antidote.'",
            "antidotes.narration": "You have {antidote} antidotes. \n        You are hearing this because the first 2 'if' statements weren't triggered. \n        When an 'if' is triggered and it has a '->' in it, nothing afterwards is executed. \n        Try adding one more antidote or say continue to move to next scene.",
            "antidotes.recap": "You have {antidote} antidotes. \n        This is the same scene as the one you just heard but you are hearing the recap content instead of the say content.\n        The 'recap' is played if you have already heard this scene once and can be useful in trimming down long scenes that the user could encounter multiple times.\n        You can add even more antidotes by saying 'add antidote' or say 'continue' to move on.",
            "images.narration": "Skill Flow Builder allows you to show content on supported devices during a scene.\n        Ready to continue?",
            "utterance-yes": "yes",
            "background music.narration": "Skill Flow Builder allows you to mix sounds into the background of a scene.\n        Ready to continue?",
            "congrats.narration": "Congratulations! You have finished the basic tutorial.\n        There are more features that can be found in the documentation.",
            "resume.narration": "This is a resuming scene. This scene is played when the user re-launches your skill after exiting.\n        Do you want to continue your story from where you last left off?",
            "utterance-Yes": "Yes",
            "utterance-No": "No",
            "pause.narration": "Thanks for playing!",
            "utterance-restart": "restart",
            "utterance-start again": "start again",
            "utterance-repeat": "repeat",
            "utterance-say again": "say again",
            "utterance-repeat it": "repeat it",
            "utterance-what did you say": "what did you say",
            "utterance-I didn’t understand": "I didn’t understand",
            "utterance-help": "help",
            "utterance-I need help": "I need help",
            "utterance-please help me": "please help me",
            "utterance-back": "back",
            "utterance-previous": "previous",
            "utterance-rewind": "rewind",
            "help.narration": "This is a help message. In this story, this scene is set up to be reachable only through the global scene."
        }
    }
}